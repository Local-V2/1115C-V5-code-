{"mode":"Blocks","hardwareTarget":"brain","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable><variable id=\"S?2S32a8%9)=F%!lp[fa\">PistonState</variable><variable type=\"boolean\" id=\"2E?{(s9qNR:sJ9/$D]W)\">PistonStateBoolean</variable><variable type=\"broadcast_msg\" id=\"DUS~zWa3itMI#15q`#qi\">message1</variable><variable type=\"broadcast_msg\" id=\"eK=uik@jzFpHNpL3q|fv\">Start</variable></variables><block type=\"v5_events_when_started\" id=\"HU0axG!QX*4`y!Ylt1n{\" x=\"270\" y=\"210\"><next><block type=\"v5_other_comment\" id=\"yJnxtB#G;}bt#G[^sC=S\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"o99C*u)oNkm^^.75SZR@\"><field name=\"comment\">sets the state variable to if the piston is extended or not</field></shadow></value><next><block type=\"v5_control_forever\" id=\"xE^wqtP?2U`0m^011)eK\"><statement name=\"SUBSTACK\"><block type=\"v5_control_if_then\" id=\"%AOAgl[wuy{Y-F-N+wnk\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"gO;Xv4]muMW3[Xo^Ed%2\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonA</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_control_if_elseif_else\" id=\"]au=S9w4H)YCcV/7(+c!\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" branches=\"2\"></mutation><value name=\"CONDITION1\"><block type=\"v5_operator_equal_to\" id=\"{G=^^S@xnB4I@d0`YI?,\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"EbL=+a()rh+_PQy[pWWl\"><field name=\"NUM\">0</field></shadow><block type=\"v5_variables_variable\" id=\"{60U0m6ImZF66*|HXr}n\"><field name=\"VARIABLE\" id=\"S?2S32a8%9)=F%!lp[fa\">PistonState</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"KQtTnZ?+AP/~tI$[#OIK\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"SUBSTACK1\"><block type=\"v5_sensing_set_digital_out\" id=\"*]qVXWccnJnbn0BpT#-3\"><field name=\"DIGITALOUT\">Piston1</field><field name=\"STATE\">high</field><next><block type=\"v5_variables_set_variable\" id=\";,R{Xkb;Y-?k){xqnl37\"><field name=\"VARIABLE\" id=\"S?2S32a8%9)=F%!lp[fa\">PistonState</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"71xkixDH*]Rh3G#[(5;E\"><field name=\"NUM\">0</field></shadow></value></block></next></block></statement><value name=\"CONDITION2\"><block type=\"v5_operator_equal_to\" id=\"d+s+FbKFPa(~ZrG[iR0w\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"n,(VLWI_OxdJP31oC.3C\"><field name=\"NUM\">0</field></shadow><block type=\"v5_variables_variable\" id=\"/2eCMqpdgoMZc_@n$LB9\"><field name=\"VARIABLE\" id=\"S?2S32a8%9)=F%!lp[fa\">PistonState</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"ghUCwAM$-$j|(r}U!UuG\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"SUBSTACK2\"><block type=\"v5_sensing_set_digital_out\" id=\"|7+gc,nhtbWe]#dmH?EE\"><field name=\"DIGITALOUT\">Piston1</field><field name=\"STATE\">low</field><next><block type=\"v5_variables_set_variable\" id=\"%qO+,s/Rzw(Qryd^_Ypx\"><field name=\"VARIABLE\" id=\"S?2S32a8%9)=F%!lp[fa\">PistonState</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"jG2;MCV%C#rfXT+-XB^2\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><statement name=\"SUBSTACK_ELSE\"><block type=\"v5_other_comment\" id=\"w7lXy~QP5t,:fBdkptmx\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"TcpO$A(l:~#1mH^0n^!Y\"><field name=\"comment\">if the state variable ever becomes something that isnt 1 or 0 and the button is clicked then its set to 0</field></shadow></value><next><block type=\"v5_control_if_then\" id=\"K`d!}_LMI^-AmmMGJCvg\"><value name=\"CONDITION\"><block type=\"v5_operator_or\" id=\"fi!1yB,XjGY7/~8g68[r\"><value name=\"OPERAND1\"><block type=\"v5_operator_not\" id=\"Tcytv5n1MKn~G~J?/hFM\"><value name=\"OPERAND\"><block type=\"v5_operator_equal_to\" id=\"TRQ1b{^FpKTWmP0Nn%v_\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"95PO1Q1fLz5{mE}R8e7M\"><field name=\"NUM\">0</field></shadow><block type=\"v5_variables_variable\" id=\"~S-O|D=5`kE=:*[2FJrt\"><field name=\"VARIABLE\" id=\"S?2S32a8%9)=F%!lp[fa\">PistonState</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"G`_6}a}!|J]=i.P+$Izb\"><field name=\"NUM\">1</field></shadow></value></block></value></block></value><value name=\"OPERAND2\"><block type=\"v5_operator_not\" id=\"DCpJrt?VmrbE/3e6?M3k\"><value name=\"OPERAND\"><block type=\"v5_operator_equal_to\" id=\"@L.ajx98TMQm[+Dug(r-\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"hh?6u?vV){:ARr!#JV76\"><field name=\"NUM\">0</field></shadow><block type=\"v5_variables_variable\" id=\"XiM|Tv}?~1eHU#kB%mK:\"><field name=\"VARIABLE\" id=\"S?2S32a8%9)=F%!lp[fa\">PistonState</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"1!1M9L~w8inQ0c|#-w9O\"><field name=\"NUM\">0</field></shadow></value></block></value></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_variables_set_variable\" id=\"XTw5S6J_px1sjHe71EIA\"><field name=\"VARIABLE\" id=\"S?2S32a8%9)=F%!lp[fa\">PistonState</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"jIpjt,*Z[:_~r.:YzRgJ\"><field name=\"NUM\">0</field></shadow></value></block></statement></block></next></block></statement><next><block type=\"v5_control_wait\" id=\".{),$x*|F{90NyDj@!gb\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"$a}+59kt[^K(ezQ!O=Io\"><field name=\"NUM\">0.2</field></shadow></value></block></next></block></statement></block></statement></block></next></block></next></block><block type=\"v5_events_when_started\" id=\"K*yeW~F!8^nl$(RDT!?O\" x=\"970\" y=\"250\"><next><block type=\"v5_other_comment\" id=\"Xmpzx4JKeHL_us}M.3-`\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"8}M@.Fu#c-Oc4A63:iBH\"><field name=\"comment\">CONFIG</field></shadow></value><next><block type=\"v5_variables_set_variable\" id=\"vobU#_.9P]$XT*xOl8bg\"><field name=\"VARIABLE\" id=\"S?2S32a8%9)=F%!lp[fa\">PistonState</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"TINU9H?z%|,2uVX8rF;o\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"v5_sensing_set_digital_out\" id=\"3G^_.i:EFDQzq:K1MZ(8\"><field name=\"DIGITALOUT\">Piston1</field><field name=\"STATE\">high</field><next><block type=\"v5_motion_set_motor_velocity\" id=\"0Z)SGePhaH=zcu`4EeH$\"><field name=\"MOTOR\">RingGrab</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"DE`dhPxlTeifut(_JW*Y\"><field name=\"NUM\">95</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"?4~4{Br`RE!+5Z8t=wxd\"><field name=\"MOTOR\">RingVacuum</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"(EAbpjoo_7i1/)+]jO;/\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"2:Qpa0(o4Y~RdBb-sm|n\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"~_a%jfas4:/w,u{?zRJ?\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_autonomous\" id=\"}Vu#Qm9q7gO1V7x92@$%\" x=\"2410\" y=\"970\"><next><block type=\"v5_sensing_set_digital_out\" id=\":ecRJ9z(XHg]DLk#FGn:\"><field name=\"DIGITALOUT\">Piston1</field><field name=\"STATE\">high</field><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"AzV65VBxvCWyYh[@k`iC\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"ACC{IKPX%S!~mCp#X[`v\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"Ykq*X.+9Iqs)Hw:rfMc{\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"_,Ixd+|=;ri3CR_gFNw2\"><field name=\"NUM\">660</field></shadow></value><next><block type=\"v5_sensing_set_digital_out\" id=\"(6Og.Uqb(a399dSjE.wg\"><field name=\"DIGITALOUT\">Piston1</field><field name=\"STATE\">low</field><next><block type=\"v5_motion_set_motor_velocity\" id=\"C=VETU[Pb8kNf+7%wXqV\"><field name=\"MOTOR\">RingGrab</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"[Z*RCdvxp3V!ri]Httza\"><field name=\"NUM\">70</field></shadow></value><next><block type=\"v5_control_wait\" id=\"Pt1agMS)|iiMCHZWDO6i\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"v]yET{V2`jG|4dfST3ZY\"><field name=\"NUM\">0.5</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"|V_jb?N7ix@5O9{^*/V@\"><field name=\"MOTOR\">RingGrab</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"eO;IQ5j7#(-lmR-$+KS6\"><field name=\"NUM\">6</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"8jOWP}xs8Irr!_K9u+Uo\"><field name=\"MOTOR\">RingGrab</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\":5kC[Vw6K,m^Lt8/M9$X\"><field name=\"NUM\">60</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_drivetrain_drive_for\" id=\"ilC4.aKW*#N$5pfwr(a8\" x=\"2190\" y=\"1490\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"zsM,W+@r8Rudx{;NAu._\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"n4P0~CBn)Trx^8Q%ZnzG\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"*KxWTL~8GCM4IJo_T=_O\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"}sfn!kotxEHK9=%Rch{X\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"C_WshtLwnYI2l0ZX4L!4\"><field name=\"NUM\">450</field></shadow></value></block></next></block></next></block></xml>","robotConfig":[{"port":[9,5,17,6,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio18_1","gearRatio":"60:36","direction":"rev","gyroType":"none","width":"13","unit":"in","wheelbase":"8","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"RingVacuum","leftDir":"false","right":"RingGrab","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"Piston1","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"RingGrab","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[16],"name":"RingVacuum","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"reverse","rev":"forward","gear":"ratio6_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT9, ratio18_1, true);\nmotor leftMotorB = motor(PORT5, ratio18_1, true);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT17, ratio18_1, false);\nmotor rightMotorB = motor(PORT6, ratio18_1, false);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 299.24, 330.2, 203.2, mm, 1.6666666666666667);\n\ncontroller Controller1 = controller(primary);\ndigital_out Piston1 = digital_out(Brain.ThreeWirePort.A);\nmotor RingGrab = motor(PORT1, ratio6_1, false);\n\nmotor RingVacuum = motor(PORT16, ratio6_1, true);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control RingVacuum\n      if (Controller1.ButtonL1.pressing()) {\n        RingVacuum.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        RingVacuum.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        RingVacuum.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control RingGrab\n      if (Controller1.ButtonR1.pressing()) {\n        RingGrab.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        RingGrab.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        RingGrab.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable, PistonState;\n\nbool PistonStateBoolean;\n\nevent message1 = event();\nevent Start = event();\n\n// \"when started\" hat block\nint whenStarted1() {\n  // sets the state variable to if the piston is extended or not\n  while (true) {\n    if (Controller1.ButtonA.pressing()) {\n      if (PistonState == 1.0) {\n        Piston1.set(true);\n        PistonState = 0.0;\n      } else if (PistonState == 0.0) {\n        Piston1.set(false);\n        PistonState = 1.0;\n      } else {\n        // if the state variable ever becomes something that isnt 1 or 0 and the button is clicked then its set to 0\n        if (!(PistonState == 1.0) || !(PistonState == 0.0)) {\n          PistonState = 0.0;\n        }\n      }\n      wait(0.2, seconds);\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  // CONFIG\n  PistonState = 0.0;\n  Piston1.set(true);\n  RingGrab.setVelocity(95.0, percent);\n  RingVacuum.setVelocity(50.0, percent);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Piston1.set(true);\n  Drivetrain.setDriveVelocity(80.0, percent);\n  Drivetrain.driveFor(reverse, 660.0, mm, true);\n  Piston1.set(false);\n  RingGrab.setVelocity(70.0, percent);\n  wait(0.5, seconds);\n  RingGrab.spinFor(forward, 6.0, turns, true);\n  RingGrab.setVelocity(60.0, percent);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","target":"Physical"}